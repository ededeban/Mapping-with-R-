[["index.html", "Making maps for conservation - GIF and interactive maps 1 Introduction", " Making maps for conservation - GIF and interactive maps Emilie Dedeban 2022-04-11 1 Introduction Creating a map has many benefits. Firstly, it allows to get information that is not visible or difficult to understand in a table. Secondly, it makes the subject more interesting. With the development of mapping tools, it is now possible to make animated map, or even collaborative. In this manual you will learn how to make a GIF and a collaborative map. These types of tools are essential assets for presentations, but also for discussions with collaborators. In the field of conservation, the use of maps allows to answer questions about human-wildlife conflict, but also to understand the distribution of animal and plant species, to better protect them. The following code will allow to: create a map with the sf package import data from an open access dataset create a GIF with gganimate create an interactive map with leaflet "],["data.html", "2 Data for this manual", " 2 Data for this manual In this manual, we are going to use two types of open access datasets. Shapefiles from Natural earth (https://www.naturalearthdata.com/) which is a public domain map dataset available at different scales with a lot of free vector and raster. The R package to hold and facilitate interaction with Natural Earth map data is rnaturalearth. Data from Global Biodiversity Information Facility (https://www.gbif.org/fr/). Here we are going to use the eBird dataset (https://www.gbif.org/fr/dataset/4fa7b334-ce0d-4e88-aaae-2e0c138d049e). Managed by the Cornell Lab of Ornithology eBirds goal is to increase data quantity through participant recruitment and engagement globally, but also to quantify and control for data quality issues such as observer variability, imperfect detection of species, and both spatial and temporal bias in data collection. Here we are going to use data extracted from eBird Canada survey between 2011 and 2021. And we will only data from 10 breeding bird species in Newfoundland. "],["load-data-and-packages.html", "3 Load data and packages 3.1 Install packages 3.2 Load the data", " 3 Load data and packages This section is to load the packages and extract the data. 3.1 Install packages Here you will need the following packages: ggplot sf data.table cowplot rnaturalearth dplyr ggspatial gganimate png leaflet rnaturalearthdata with devtools::install_github(\"ropensci/rnaturalearthdata\") To install packages: use install.packages(\"name of package\") 3.2 Load the data birdsurvey &lt;- fread(&quot;Birdsurvey.csv&quot;) Check if we have the right period from 2011 to 2021 min(birdsurvey$year) ## [1] 2005 max(birdsurvey$year) ## [1] 2021 Check the number of species and the type of species uniqueN(birdsurvey$species) ## [1] 10 unique(birdsurvey$species) ## [1] &quot;Fratercula arctica&quot; &quot;Bubo scandiacus&quot; &quot;Clangula hyemalis&quot; &quot;Rissa tridactyla&quot; ## [5] &quot;Euphagus carolinus&quot; &quot;Hesperiphona vespertina&quot; &quot;Oceanodroma leucorhoa&quot; &quot;Podiceps auritus&quot; ## [9] &quot;Chaetura pelagica&quot; &quot;Emberiza aureola&quot; "],["basemap.html", "4 Import background basemap 4.1 Canada map and Newfoundland subset", " 4 Import background basemap Use ne_states to get provincial/territorial borders from rnaturalearth package canada_map &lt;- ne_states(country = &#39;canada&#39;, returnclass = &quot;sf&quot;) 4.1 Canada map and Newfoundland subset geom_sf function here allow to open the naturalearth map polygon. Inside this function, fill = ifelse () allow to identify with a specific color the Newfoundland and Labrador region. coord_sf allow here to set the projection of our choice. scale_x_continuous allow to manually set the breaks of the x-axis. can_map &lt;- ggplot() + geom_sf(data = canada_map, colour = &quot;black&quot;, fill = ifelse(canada_map$name == &quot;Newfoundland and Labrador&quot;, &#39;orange&#39;, &#39;white&#39;)) + coord_sf(crs = &quot;+proj=lcc +lat_1=49 +lat_2=77 +lon_0=-91.52 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs&quot;) + scale_x_continuous(breaks = c(-120, -100, -80, -60)) + theme_bw() can_map Subset the map to Newfoundland part (need for next part of the manual): map_nl &lt;- canada_map[10,] "],["GIF.html", "5 Create GIF animation 5.1 Create static map 5.2 Subset species and period 5.3 Create GIF by year 5.4 Add scale bar and north arrow", " 5 Create GIF animation 5.1 Create static map Lets use the previous script map from NL with zoom on Newfoundland island. Before running this, you need to have created map_nl, see Import background basemap Import background basemap Add the data on the map geom_point function to add the data with x (longitude) and y (latitude) axis. The projection of the data needs to be in the same projection than the background map. coord_sf allow here to set manually the zoom on specific area based on x and y axis limits. ggplot() + geom_sf(data = map_nl, colour = &quot;black&quot;, fill = &quot;white&quot;) + geom_sf() + # We can add an ENTIRELY new data set inside a geom geom_point(data = birdsurvey, aes(x = decimalLongitude, y = decimalLatitude), alpha = 0.1, colour = &quot;blue&quot;) + labs( title = &quot;Bird survey between 2002 and 2021&quot; ) + xlab(&quot;Longitude&quot;)+ ylab(&quot;Latitude&quot;) + # Zoom in to a specific view coord_sf(xlim = c(-60, -52), ylim = c(46, 52)) 5.2 Subset species and period Bubo scandiacus Bubo &lt;- subset(birdsurvey, species == &#39;Bubo scandiacus&#39;) Bubo_2011_2021 &lt;- subset(Bubo, year &gt;= 2011 &amp; year &lt;= 2021) ### Plot Bubo distribution only ggplot() + geom_sf(data = map_nl, colour = &quot;black&quot;, fill = &quot;white&quot;) + geom_sf() + # We can add an ENTIRELY new data set inside a geom geom_point(data = Bubo_2011_2021, aes(x = decimalLongitude, y = decimalLatitude), alpha = 0.8, size = 3, colour = &quot;darkgreen&quot;) + labs( title = &quot;Snowy owl survey between 2011 and 2021&quot; ) + xlab(&quot;Longitude&quot;)+ ylab(&quot;Latitude&quot;) + # Zoom in to a specific view coord_sf(xlim = c(-60, -52), ylim = c(46, 52))+ theme_bw() 5.3 Create GIF by year Set the map for the GIF Here the main difference with a static plot is the function transition_time from the package gganimate. This function allow to set which column we want to use to get one image by period (here, by year). ### Create a ggplot + add specific gganimate function = transition_time plot1 &lt;- ggplot() + geom_sf(data = map_nl, colour = &quot;black&quot;, fill = &quot;white&quot;) + # We can add an ENTIRELY new data set inside a geom geom_point(data = Bubo, aes(x = decimalLongitude, y = decimalLatitude, color = as.factor(year)), alpha = 0.8, size = 3.5) + transition_time(year) + #### this will allow us to get one image of data by year labs( title = &quot;Bird survey between 2002 and 2021&quot; ) + xlab(&quot;Longitude&quot;)+ ylab(&quot;Latitude&quot;) + # Zoom in to a specific view coord_sf(xlim = c(-60, -52), ylim = c(46, 52)) + labs(title = &quot;Year: {frame_time}&quot;) 5.4 Add scale bar and north arrow A map always needs scale and north arrow. Here we separately set the function to add the two layers to the map previously created before (plot1) ##### Add scale bar and north arrow plot1 &lt;- plot1 + annotation_scale(location = &quot;tl&quot;, width_hint = 0.3) + annotation_north_arrow(location = &quot;tr&quot;, which_north = &quot;true&quot;, height = unit(1, &quot;cm&quot;), width = unit(1, &quot;cm&quot;), pad_x = unit(0.25, &quot;cm&quot;), pad_y = unit(0.25, &quot;cm&quot;), style = north_arrow_fancy_orienteering) + theme_bw() + theme(panel.background = element_rect(fill = &quot;aliceblue&quot;), legend.position = &quot;none&quot;) Create the GIF The function animate from the package gganimate is the function use to create the GIF output. There is different options to set. Here we use only the options: nframes and duration to define the number of frames per second (one frame per year (10 years of survey) for 15 seconds of animation). ###### This part will create the gif animate(plot1, nframes = 10, duration = 15) ### nframes = is the number of frames/images we want (here, one by year = 10 years) / duration is the duration of the gif, here 15 secondes "],["interactive.html", "6 Create interactive map with leaflet package 6.1 Why interactive maps?: 6.2 Add layers (markers, tiles, polygons) 6.3 Add the Snowy owl data 6.4 Customize Leaflet Maps 6.5 Add Scale bar 6.6 Add Popups 6.7 Customize your popup", " 6 Create interactive map with leaflet package To learn about leaflet functions: (https://rstudio.github.io/leaflet/) 6.1 Why interactive maps?: Static maps are useful for creating figures for reports and presentation. Sometimes, however, you want to interact with your data. You can use the leaflet package for R to overlay your data on top of interactive maps. Leaflet supports various elements for the composition of maps such as Map tiles, Markers, Polygons, Lines, Popups, and GeoJSON. Create a collaborative work, and share the results of your study, in an attractive way. 6.2 Add layers (markers, tiles, polygons) library(leaflet) leaflet() %&gt;% addTiles() 6.3 Add the Snowy owl data addCircleMakers function to add the data with x (longitude) and y (latitude) axis. Similar than geom_point from ggplot. # Other marker types, but circles are the simplest to use leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers(data = Bubo_2011_2021, lng = Bubo_2011_2021$decimalLongitude, lat = Bubo_2011_2021$decimalLatitude) 6.4 Customize Leaflet Maps You can customize your leaflet map too. Lets do the following: Add color palette by year with colorNumeric and colorFactor to set the palette (example of palettes:(https://www.datanovia.com/en/fr/blog/top-palettes-de-couleurs-r-a-connaitre-pour-une-meilleur-visualisation-des-donnees/) Adjust the point symbology. Add custom data-driven popups to your map. year &lt;- colorNumeric(&quot;YlGnBu&quot;, domain = Bubo_2011_2021$year) year &lt;- colorFactor(topo.colors(16), domain = Bubo_2011_2021$year) leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers(data = Bubo_2011_2021, lng = Bubo_2011_2021$decimalLongitude, lat = Bubo_2011_2021$decimalLatitude, fillColor = ~year(year), fillOpacity = 0.8, color = &quot;black&quot;, weight = 1, radius = 5) %&gt;% addLegend(data = Bubo_2011_2021, pal = year, values = ~year, title = &quot;Year&quot;) 6.5 Add Scale bar To add a scale bar, need function addScaleBar # ---- Mapping: Add Scale Bar ---- leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers(data = Bubo_2011_2021, lng = Bubo_2011_2021$decimalLongitude, lat = Bubo_2011_2021$decimalLatitude, fillColor = ~year(year), fillOpacity = 0.8, color = &quot;black&quot;, weight = 1, radius = 5) %&gt;% addLegend(data = Bubo_2011_2021, pal = year, values = ~year, title = &quot;Year&quot;) %&gt;% addScaleBar(position = &quot;bottomleft&quot;) 6.6 Add Popups To add popups, you need to use popup in addCircleMarkers and set the colum you want to show in your popup (here the localisation of the birds observed) # ---- Mapping: Add Popups ---- # Popups appear when you click on a point leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers(data = Bubo_2011_2021, lng = Bubo_2011_2021$decimalLongitude, lat = Bubo_2011_2021$decimalLatitude, fillColor = ~year(year), fillOpacity = 0.8, color = &quot;black&quot;, weight = 1, radius = 5, popup = ~locality) %&gt;% addLegend(data = Bubo_2011_2021, pal = year, values = ~year, title = &quot;Year&quot;) %&gt;% addScaleBar(position = &quot;bottomleft&quot;) 6.7 Customize your popup To customize your own popup, you need to use html Hello b is bold tex Hello, in bold text br adds a line break Then you can specify replace popup = ~locality with the name of your popup created (here mypopup) # ---- Mapping: Add Custom Popups ---- # Custom pop ups need to be written in html! # &lt;b&gt;Hello&lt;/b&gt; b is bold tex Hello, in bold text # &lt;br&gt; br adds a line break Bubo_2011_2021 &lt;- Bubo_2011_2021 %&gt;% mutate(mypopup = paste0(locality, &quot;&lt;br&gt;&quot;, &quot;&lt;b&gt;Individual count: &lt;/b&gt;&quot;, individualCount, &quot;&lt;br&gt;&quot;, &quot;&lt;b&gt;Event date: &lt;/b&gt;&quot;, eventDate, &quot;&lt;br&gt;&quot;)) # Now specify the popup as the custom popup we just created leaflet() %&gt;% addTiles() %&gt;% addCircleMarkers(data = Bubo_2011_2021, lng = Bubo_2011_2021$decimalLongitude, lat = Bubo_2011_2021$decimalLatitude, fillColor = ~year(year), fillOpacity = 0.8, color = &quot;black&quot;, weight = 1, radius = 5, popup = ~mypopup) %&gt;% addLegend(data = Bubo_2011_2021, pal = year, values = ~year, title = &quot;Year&quot;) %&gt;% addScaleBar(position = &quot;bottomleft&quot;) If you want to save and share your collaborative map, you can use the function saveWidget from the package htmlWidgets. #save it! # htmlwidgets::saveWidget(map, &quot;map.html&quot;, selfcontained = T) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
